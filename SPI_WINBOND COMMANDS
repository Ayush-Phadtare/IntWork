#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include "ql_api_osi.h"

#include "ql_api_spi.h"
#include "ql_log.h"
#include "spi_demo.h"
#include "ql_gpio.h"
#include "ql_power.h"


#define QL_SPI_DEMO_LOG_LEVEL       	        QL_LOG_LEVEL_INFO
#define QL_SPI_DEMO_LOG(msg, ...)			    QL_LOG(QL_SPI_DEMO_LOG_LEVEL, "ql_SPI_DEMO", msg, ##__VA_ARGS__)
#define QL_SPI_DEMO_LOG_PUSH(msg, ...)	        QL_LOG_PUSH("ql_SPI_DEMO", msg, ##__VA_ARGS__)

ql_task_t spi_demo_task = NULL;
int spi_power_lock = 0;
unsigned char *dataarr;
unsigned char *readarr = NULL;
int writeptr = 0;
unsigned int readptr = 0;
char *header = "^+";
char *footer = "~-";
int pagenums;

#define QL_TYPE_SHIFT_8             8

#define QL_CUR_SPI_PORT             QL_SPI_PORT2
#define QL_CUR_SPI_CS_PIN           QL_CUR_SPI2_CS_PIN
#define QL_CUR_SPI_CS_FUNC          QL_CUR_SPI2_CS_FUNC
#define QL_CUR_SPI_CLK_PIN          QL_CUR_SPI2_CLK_PIN
#define QL_CUR_SPI_CLK_FUNC         QL_CUR_SPI2_CLK_FUNC
#define QL_CUR_SPI_DO_PIN           QL_CUR_SPI2_DO_PIN
#define QL_CUR_SPI_DO_FUNC          QL_CUR_SPI2_DO_FUNC
#define QL_CUR_SPI_DI_PIN           QL_CUR_SPI2_DI_PIN
#define QL_CUR_SPI_DI_FUNC          QL_CUR_SPI2_DI_FUNC

////////////BASE INSTRUCTIONS////////////

void write_enable(){//Use WR before ERASE or PAGE Program Operations

    unsigned char *outdata;
    unsigned short outlen;

    outlen = 1;

    outdata = (unsigned char*)malloc(sizeof(unsigned char) * outlen);
    *outdata = 0x06;

    ql_spi_cs_low(QL_CUR_SPI_PORT);
    ql_spi_write(QL_CUR_SPI_PORT, outdata, outlen);
    ql_rtos_task_sleep_ms(100);
    ql_spi_cs_high(QL_CUR_SPI_PORT);

    free(outdata);
}

void write_disable(){
    
    unsigned char *outdata;
    unsigned short outlen;

    outlen = 1;

    outdata = (unsigned char*)malloc(sizeof(unsigned char) * outlen);
    *outdata = 0x04;

    ql_spi_cs_low(QL_CUR_SPI_PORT);
    ql_spi_write(QL_CUR_SPI_PORT, outdata, outlen);
    ql_rtos_task_sleep_ms(100);
    ql_spi_cs_high(QL_CUR_SPI_PORT);

    free(outdata);

}

unsigned char* change_address(unsigned char* outdata, uint32_t addr){ //Change the received uint address to hex

    int shift = 16;

    for(int i = 1; i < 4; i++){
        *(outdata+i) = (addr>>shift) & 0xFF;
        shift -= 8;
    }

    return outdata;
    
}

void sector_erase(uint32_t address){
    ql_errcode_spi_e ret;
    unsigned char *outdata;
    unsigned short outlen;

    outlen = 4;

    outdata = (unsigned char*)malloc(outlen);

    *outdata = 0x20;

    change_address(outdata, address);
    
    ql_rtos_task_sleep_ms(100);
    write_disable();
    ql_rtos_task_sleep_ms(100);
    write_enable();

    ql_spi_cs_low(QL_CUR_SPI_PORT);
    ret = ql_spi_write(QL_CUR_SPI_PORT, outdata, outlen);
    ql_rtos_task_sleep_ms(100);
    ql_spi_cs_high(QL_CUR_SPI_PORT);
    ql_rtos_task_sleep_ms(400);

    if(ret != QL_SPI_SUCCESS){
        QL_SPI_DEMO_LOG("RET Sector Erase: %d", ret);
    }else{
        QL_SPI_DEMO_LOG("Sector Erase Successful");
    }

    free(outdata);
}

void page_program(uint32_t address, char *datapack){
    ql_errcode_spi_e ret;
    unsigned int packlen = strlen(datapack);
    unsigned int datalen = packlen + 8;
    int locptr;

    if(address % 4096 == 0){
        sector_erase(address);
        ql_rtos_task_sleep_s(2);
    }

    dataarr = (unsigned char*)malloc(datalen);
    *dataarr = 0x02;

    change_address(dataarr, address);

    locptr = 4;

    dataarr[locptr] = header[0];
    dataarr[locptr + 1] = header[1];
    locptr += 2;

    for(int i = 0; i < packlen; i++){
       dataarr[i + 6] = datapack[i];
    }
    locptr += packlen;

    dataarr[locptr] = footer[0];
    dataarr[locptr + 1] = footer[1];
    locptr += 2;

    ql_rtos_task_sleep_ms(100);
    write_disable();
    ql_rtos_task_sleep_ms(100);
    write_enable();

    ql_spi_cs_low(QL_CUR_SPI_PORT);
    ret = ql_spi_write(QL_CUR_SPI_PORT, dataarr, datalen);
    ql_spi_cs_high(QL_CUR_SPI_PORT);
    ql_rtos_task_sleep_ms(1000);

    if(ret != QL_SPI_SUCCESS){
        QL_SPI_DEMO_LOG("RET Page Program: %d", ret);
    }else{
        QL_SPI_DEMO_LOG("Page Program Successful");
    }

    writeptr += locptr - 4;
    readptr = writeptr; 

    free(dataarr);
}

void read_page(int pagenums){
    if(readptr % 256 == 0){
        readptr -=256;
    }else{
        readptr -=  readptr % 256;
    }
    for(int j = 0; j < pagenums; j++){
        ql_errcode_spi_e ret ;
        unsigned char *outdata;
        unsigned int outlen;   
        outlen = 4;

        outdata = (unsigned char*)malloc(5);
        *outdata = 0x03;  

        readarr = (unsigned char*)malloc(2560);

        change_address(outdata, readptr); 

        ql_rtos_task_sleep_s(1);
        ret = ql_spi_read_follow_write(QL_CUR_SPI_PORT, outdata, outlen, readarr, 256);
        ql_rtos_task_sleep_s(2);

        if(ret != QL_SPI_SUCCESS){
            QL_SPI_DEMO_LOG("RET Read: %d", ret);
        }else{
            QL_SPI_DEMO_LOG("Read Page Successful %d", j);
        }
        
        QL_SPI_DEMO_LOG("Value of Array: %s", readarr);
        
        for(int i = 0; i < 256; i++){
            QL_SPI_DEMO_LOG("%d: %c", readptr + i, readarr[i]);
            ql_rtos_task_sleep_ms(10);
        }  
        
        readptr -= 256; 
        
        free(outdata);
        free(readarr);
    }
    QL_SPI_DEMO_LOG("ALL PACKETS READ");
}

static void ql_spi_demo_task_pthread(void *ctx){
    char *packet1 = "FUL86671806569960525L1230823003935018.570059N073.911568E404x90182f238416647000.14189.6521012900SVENID1CDAC10000000KL01AA55550600.8101AIRTEL238416647182f81000000000000000000000000000000000000000000000000.0003.5O100000000000011847";
    char *packet2 = "NRM86671806569960501L1230823004235018.570049N073.911560E404x90182f238416647000.13189.6522013000S0599.96AIRTEL";
    QlOSStatus err = 0;
    ql_errcode_gpio ret;
    ql_spi_clk_e spiclk;
    ql_spi_transfer_mode_e transmode;
    unsigned int framesize;
    ql_spi_config_s spi_config = {0};

    
    if (QL_CUR_SPI_CS_PIN == QUEC_PIN_NONE || QL_CUR_SPI_CS_PIN == QUEC_PIN_NONE || \
        QL_CUR_SPI_DO_PIN == QUEC_PIN_NONE || QL_CUR_SPI_DI_PIN == QUEC_PIN_NONE)
    {
        QL_SPI_DEMO_LOG("pin err");
        goto QL_SPI_EXIT;
    }

    ret = ql_pin_set_func(QL_CUR_SPI_CS_PIN, QL_CUR_SPI_CS_FUNC);
    if (ret != QL_GPIO_SUCCESS)
    {
        QL_SPI_DEMO_LOG("set pin err");
        goto QL_SPI_EXIT;
    }
    
    ret = ql_pin_set_func(QL_CUR_SPI_CLK_PIN, QL_CUR_SPI_CLK_FUNC);
    if (ret != QL_GPIO_SUCCESS)
    {
        QL_SPI_DEMO_LOG("set pin err");
        goto QL_SPI_EXIT;
    }
    ret = ql_pin_set_func(QL_CUR_SPI_DO_PIN, QL_CUR_SPI_DO_FUNC);
    if (ret != QL_GPIO_SUCCESS)
    {
        QL_SPI_DEMO_LOG("set pin err");
        goto QL_SPI_EXIT;
    }
    ret = ql_pin_set_func(QL_CUR_SPI_DI_PIN, QL_CUR_SPI_DI_FUNC);
    if (ret != QL_GPIO_SUCCESS)
    {
        QL_SPI_DEMO_LOG("set pin err");
        goto QL_SPI_EXIT;
    }
   //////PIN END

    spi_config.input_mode = QL_SPI_INPUT_TRUE;
    spi_config.port = QL_CUR_SPI_PORT;
    framesize = 8;
    transmode = QL_SPI_DIRECT_POLLING; 
    spiclk = QL_SPI_CLK_1_5625MHZ;
    spi_config.spiclk = spiclk;
    spi_config.framesize = framesize;
    spi_config.cs_polarity0 = QL_SPI_CS_ACTIVE_LOW;
    spi_config.cs_polarity1 = QL_SPI_CS_ACTIVE_LOW;
    spi_config.cpol = QL_SPI_CPOL_LOW;
    spi_config.cpha = QL_SPI_CPHA_1Edge;
    spi_config.input_sel = QL_SPI_DI_1;
    spi_config.transmode = transmode;  
    spi_config.cs = QL_SPI_CS0;
    spi_config.clk_delay = QL_SPI_CLK_DELAY_0;
    ql_spi_init_ext(spi_config);

    ql_rtos_task_sleep_s(5);
    QL_SPI_DEMO_LOG("Starting Read Write");

    for(int i = 0; i < 2; i++){
        page_program(writeptr, packet1);
        ql_rtos_task_sleep_s(3);
        QL_SPI_DEMO_LOG("Packet 1 Loop %d done", i);
        page_program(writeptr, packet2);
        QL_SPI_DEMO_LOG("Packet 2 Loop %d done", i);
        ql_rtos_task_sleep_s(3);
    }
    read_page(3);

    ql_rtos_task_sleep_s(5);

    QL_SPI_EXIT:
    QL_SPI_DEMO_LOG("ql_rtos_task_delete");
	err = ql_rtos_task_delete(NULL);
	if(err != QL_OSI_SUCCESS)
	{
		QL_SPI_DEMO_LOG("task deleted failed");
	}
    ql_spi_release(QL_CUR_SPI_PORT);
}

QlOSStatus ql_spi_demo_init(void)
{	
    ql_rtos_task_sleep_s(30);
    QL_SPI_DEMO_LOG("Entering Main Code");
	QlOSStatus err = QL_OSI_SUCCESS;
	err = ql_rtos_task_create(&spi_demo_task, SPI_DEMO_TASK_STACK_SIZE, SPI_DEMO_TASK_PRIO, "ql_spi_demo", ql_spi_demo_task_pthread, NULL, SPI_DEMO_TASK_EVENT_CNT);
	if(err != QL_OSI_SUCCESS)
	{
		QL_SPI_DEMO_LOG("demo_task created failed");
        return err;
	}
    
    return err;
}
